/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans = 0;

    pair<int,int> postorder(TreeNode* root){

        // base case
        if(!root)
            return {0,0};

        // recursive case
        auto left = postorder(root->left);
        int l_sum = left.first;
        int l_cnt = left.second;

        auto right = postorder(root->right);
        int r_sum = right.first;
        int r_cnt = right.second;

        int sum = l_sum + r_sum + root->val;
        int cnt = l_cnt + r_cnt + 1;

        if(root->val == sum/cnt)
            ans++;

        return {sum,cnt};

    }
    int averageOfSubtree(TreeNode* root) {
        
        postorder(root);

        return ans;
    }
};