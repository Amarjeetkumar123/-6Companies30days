// brute force

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root, bool canRob = true) {
        // brute force
        if(!root)
           return 0;

        int dontRob = rob(root -> left, true) + rob(root -> right, true);

        int robRoot = canRob ? root -> val + rob(root -> left, false) + rob(root -> right, false) : -1;
        
        return max(dontRob, robRoot);
    }
};




// optimized

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
private:
    pair<int,int> robDFS(TreeNode* root) {
        if (root == nullptr) {
            return {0, 0};
        }
        
        pair<int,int> robLeft = robDFS(root->left);
        pair<int,int> robRight = robDFS(root->right);
        
        int robThisNode = root->val + robLeft.second + robRight.second;

        int skipThisNode = max(robLeft.first, robLeft.second) + max(robRight.first, robRight.second);
        
        return {robThisNode, skipThisNode};

    }
public:
    int rob(TreeNode* root) {

        // pair<robbedRoot,skipRoot>
        pair<int,int> ans = robDFS(root);
        
        return max(ans.first, ans.second);
    }
};