// Dijkstra algorithm

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        
        // create adjacency list
        vector<vector<pair<int,int>>>adj(n+1);

        for(auto edge : times){
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];

            adj[u].push_back({w,v});
        }

        vector<int>dist(n+1,INT_MAX);

        // creating priority_queue on basis of {weight,node}
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        dist[k] = 0;
        pq.push(make_pair(0,k));

        while(!pq.empty()){

            auto x = pq.top();
            pq.pop();

            for(auto nbr : adj[x.second]){

                if(dist[x.second] + nbr.first < dist[nbr.second]){

                    dist[nbr.second] = dist[x.second] + nbr.first;

                    pq.push(make_pair(dist[x.second] + nbr.first, nbr.second));
                }
            }
        }

        int max_time = INT_MIN;
        for(int i=1;i<dist.size();i++){
            
            max_time = max(max_time,dist[i]);
        }

        return max_time == INT_MAX ? -1 : max_time;
    }
};