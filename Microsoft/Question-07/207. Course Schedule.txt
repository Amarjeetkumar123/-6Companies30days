class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        // Topological sort
        
       // creating adjacency list
        unordered_map<int,list<int>>adj;
        for(int i=0;i<prerequisites.size();i++){
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            
            adj[u].push_back(v);
        }
        
        // find indegree of all nodes
        vector<int>indegree(numCourses);
        for(auto i : adj){
            for(auto j : i.second)
                indegree[j]++;
        }
        
            // 0 degree waale ko push kr do
        queue<int>q;
        for(int i=0;i<numCourses;i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }

        // do bfs
        vector<int>ans;
        while(!q.empty()){
            int front = q.front();
            q.pop();

            ans.push_back(front);

            for(auto nbr : adj[front]){

                indegree[nbr]--;
                if(indegree[nbr] == 0)
                    q.push(nbr);
            }
        }
        
        return ans.size() == numCourses;
    }
};